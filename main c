/* 100% original code by Yeo Guo Hong and Simon Wong

 * Copyrighted 2018 DO NOT STEAL */



/* LIGHT_THRESHOLD*: 3000 lux

 * TEMP_THRESHOLD*: 28oC

 * ACC_THRESHOLD*: 0.1g

 * Note :	Please do not damage the board by subjecting it to mechanical stress.

			The requisite threshold can be easily met by shaking the board slightly.

 * BLINK_BLUE: Blue Light for RGB LED, alternating between ON and OFF every 1 second.

 * ALTERNATE_LED: The blue and red LEDs alternate every 500 milliseconds. The Green LED should be off throughout. */



/* To do list:

 *

 * [DONE]

 * - Find out how to make the red LED stop lighting up (Changed GPIO_SetDir in rgb.c)

 * - Check if there is a way to make both OLED and green LED separate (currently tied by P2.1) (Just don't initialize green LED)

 * - Double check the conversion from acc_read values to g-values (Checked; it's correct)

 * - Optimise COUNTDOWN(), light_values (Ye, done)

 * - Find out the argument in temp_init() to initialize it (Done, I don't even know what was the issue before)

 * - Fix COUNTDOWN skip when user presses sw3 during COUNTDOWN() (Done)

 *

 *

 * [PENDING]

 * - ALTERNATE_RED does not blink every 500ms; could be because of lag

 * - Figure out how to use EINT3 interrupt for MODE_TOGGLE (optional)

 * - Include UART support

 * - Enhancement: Change LIGHT_THRESHOLD, TEMP_THRESHOLD (maybe), ACC_THRESHOLD using joystick

 * - Do the lab report lmao

 *

 */



#include "LPC17xx.h"

#include "lpc17xx_pinsel.h"

#include "lpc17xx_gpio.h"

#include "lpc17xx_i2c.h"

#include "lpc17xx_ssp.h"

#include "lpc17xx_timer.h"

#include "lpc17xx_uart.h"



#include "acc.h"

#include "joystick.h"

#include "led7seg.h"

#include "light.h"

#include "oled.h"

#include "pca9532.h"

#include "rgb.h"

#include "rotary.h"

#include "temp.h"



#include <stdio.h>

#include <math.h>

#include <string.h>







volatile uint32_t msTicks; 									// Counter for 1ms SysTicks

volatile uint32_t lightTicks;

volatile uint32_t tempTicks;

volatile uint32_t climbTicks;

volatile uint32_t emergencyTicks;



uint32_t currentTicks = 0;

float elapsed_ms = 0.0;



uint8_t MODE_TOGGLE = 1, EMERGENCY_OVER = 1;

uint32_t MODE_TOGGLE_counter = 0, MODE_TOGGLE_counter2 = 0;

uint8_t msg[50];



uint8_t BLINK_BLUE_toggle = 0, ALTERNATE_LED_toggle = 0;



int8_t acc_x = 0, acc_y = 0, acc_z = 0;

int8_t acc_x_init = 0, acc_y_init = 0, acc_z_init = 0;

float acc_net_sq = 0.0, g_value = 0.0;

float ACC_THRESHOLD = 0.1;

uint32_t acc_threshold_counter = 0;



uint8_t init_toggle = 1;



uint8_t joyState = 0, joystick_toggle = 0;

uint32_t joystick_counter = 0, joystick_counter2 = 0;



uint32_t light_value = 0;

uint32_t LIGHT_THRESHOLD = 3000;



char oled_init1[15] = "Initialisation",

	oled_init2[15] = "mode. Press",

	oled_init3[15] = "TOGGLE to climb",



	oled_threshold[15] = "SET THRESHOLD:",

	oled_threshold_acc[15] = "",

	oled_threshold_light[15] = "",

	oled_threshold_temp[15] = "",



	oled_toggle1[15] = "INITIALISATION",

	oled_toggle2[15] = "COMPLETE.",

	oled_toggle3[15] = "ENTERING CLIMB",

	oled_toggle4[15] = "MODE",



	oled_climb[15] = "CLIMB",

	oled_acc[15] = "",

	oled_light[15] = "",

	oled_dim[15] = "DIM",

	oled_temp[15] = "",

	oled_restnow[15] = "REST NOW",



	oled_emergency[15] = "EMERGENCY Mode!",

	oled_emergency_acc[15] = "",

	oled_emergency_duration[15] = "",

	oled_emergency_temp[15] = "",



	oled_emergency_saved1[15] = "Emergency",

	oled_emergency_saved2[15] = "clear!",



	oled_blank[15] = "               ",

	oled_blank_half[15] = "       ",

	uart_acc[15] = "",
	uart_light[15] = "",
	uart_temp[15] = "",
	uart_emergency[] = "EMERGENCY!",
	uart_emergency_cleared[100] = "";



uint8_t rotaryState = 0, rotary_value = 0;

uint32_t rotary_left = 0, rotary_right = 0;



int32_t temp_value = 0;

float temp_value_c = 0.0;

uint32_t temp_threshold_counter = 0;

float TEMP_THRESHOLD = 28.0;


uint8_t uart_climb_toggle = 0, uart_emergency_toggle = 0;

int temp = 0;


static void ALTERNATE_LED(void);

static void BLINK_BLUE(void);

uint32_t GETMSTICKS(void);

static void RGB_INIT(void);

static void RGB_SETLED(uint8_t LedMask);

void UART_CLIMB(void);






static void init_ssp(void) {



	SSP_CFG_Type SSP_ConfigStruct;

	PINSEL_CFG_Type PinCfg;



	/*

	 * Initialize SPI pin connect

	 * P0.7 - SCK;

	 * P0.8 - MISO

	 * P0.9 - MOSI

	 * P2.2 - SSEL - used as GPIO

	 */



	PinCfg.Funcnum = 2;

	PinCfg.OpenDrain = 0;

	PinCfg.Pinmode = 0;

	PinCfg.Portnum = 0;

	PinCfg.Pinnum = 7;

	PINSEL_ConfigPin(&PinCfg);

	PinCfg.Pinnum = 8;

	PINSEL_ConfigPin(&PinCfg);

	PinCfg.Pinnum = 9;

	PINSEL_ConfigPin(&PinCfg);

	PinCfg.Funcnum = 0;

	PinCfg.Portnum = 2;

	PinCfg.Pinnum = 2;

	PINSEL_ConfigPin(&PinCfg);



	SSP_ConfigStructInit(&SSP_ConfigStruct);



	// Initialize SSP peripheral with parameter given in structure above

	SSP_Init(LPC_SSP1, &SSP_ConfigStruct);



	// Enable SSP peripheral

	SSP_Cmd(LPC_SSP1, ENABLE);



}



static void init_i2c(void) {



	PINSEL_CFG_Type PinCfg;



	/* Initialize I2C2 pin connect */

	PinCfg.Funcnum = 2;

	PinCfg.Pinnum = 10;

	PinCfg.Portnum = 0;

	PINSEL_ConfigPin(&PinCfg);

	PinCfg.Pinnum = 11;

	PINSEL_ConfigPin(&PinCfg);



	// Initialize I2C peripheral

	I2C_Init(LPC_I2C2, 100000);



	/* Enable I2C1 operation */

	I2C_Cmd(LPC_I2C2, ENABLE);



}



static void init_GPIO(void) {



	PINSEL_CFG_Type PinCfg;						// Initialize button



	PinCfg.Funcnum = 0;							// Initializing EMERGENCY_OVER

	PinCfg.Pinnum = 31;

	PinCfg.Portnum = 1;

	PINSEL_ConfigPin(&PinCfg);



	GPIO_SetDir(1, (1 << 31), 0);



	PinCfg.Funcnum = 0;							// Initializing MODE_TOGGLE

	PinCfg.Pinnum = 10;

	PinCfg.Portnum = 2;

	PINSEL_ConfigPin(&PinCfg);



	GPIO_SetDir(2, (1 << 10), 0);



}



void EINT3_IRQHandler(void) {



	if ((LPC_GPIOINT -> IO2IntStatF >> 10) & 0x1) {

		LPC_GPIOINT -> IO2IntClr = 1 <<10;

	}

}



void SysTick_Handler(void) {					// Just increment SysTick counter



	msTicks++;

	BLINK_BLUE();

	ALTERNATE_LED();
	UART_CLIMB();



}



__INLINE static void systick_delay (uint32_t delayTicks) {	// Creates a delay of the appropriate number of Systicks (happens every 1 ms)



	currentTicks = msTicks;									// reads current tick counter



	while ((msTicks - currentTicks) < delayTicks);			// Now loop until required number of ticks passes

															// *** DON'T CHANGE TO IF, WILL BREAK EVERYTHING ***

}







static void ALTERNATE_LED(void) {



	if (ALTERNATE_LED_toggle == 1) {



		lightTicks++;



		if (lightTicks % 1000 < 500) {

			RGB_SETLED(2);

		}



		else {

			RGB_SETLED(1);

		}

	}

}



static void BLINK_BLUE(void) {



	if (BLINK_BLUE_toggle == 1) {



		lightTicks++;



		if (lightTicks % 2000 < 1000) {

			RGB_SETLED(2);

		}



		else {

			RGB_SETLED(0);

		}

	}

}



uint32_t GETMSTICKS(void) {



	return msTicks;



}



static void RGB_INIT(void) {



    GPIO_SetDir( 2, (1<<0), 1 );			// red

    GPIO_SetDir( 0, (1<<26), 1 );			// blue



}



static void RGB_SETLED(uint8_t LedMask) {



	if ((LedMask & RGB_RED) != 0) {

		GPIO_SetValue(2, (1<<0));

	}



	else {

		GPIO_ClearValue(2, (1<<0));

    }



	if ((LedMask & RGB_BLUE) != 0) {

		GPIO_SetValue(0, (1<<26));

    }



	else {

		GPIO_ClearValue(0, (1<<26));

    }



}

//Uart function starts here

void pinsel_uart3(void){
 PINSEL_CFG_Type PinCfg;
 PinCfg.Funcnum = 2;
 PinCfg.Pinnum = 0;
 PinCfg.Portnum = 0;
 PINSEL_ConfigPin(&PinCfg);
 PinCfg.Pinnum = 1;
 PINSEL_ConfigPin(&PinCfg);
}

void init_uart(void){
 UART_CFG_Type uartCfg;
 uartCfg.Baud_rate = 115200;
 uartCfg.Databits = UART_DATABIT_8;
 uartCfg.Parity = UART_PARITY_NONE;
 uartCfg.Stopbits = UART_STOPBIT_1;
 //pin select for uart3;
 pinsel_uart3();
 //supply power & setup working parameters for uart3
 UART_Init(LPC_UART3, &uartCfg);
 //enable transmit for uart3
 UART_TxCmd(LPC_UART3, ENABLE);
}

void UART_CLIMB(void) {

	if (uart_climb_toggle == 1) {

		climbTicks++;

		if ((climbTicks % 5000) == 1) {

			sprintf(uart_acc, "Acc: %.2f g \r\n", g_value);
			UART_Send(LPC_UART3, (uint8_t *)uart_acc , strlen(uart_acc), BLOCKING);
			sprintf(uart_light, "Light: %lu lx \r\n", light_value);
			UART_Send(LPC_UART3, (uint8_t *)uart_light , strlen(uart_light), BLOCKING);
			sprintf(uart_temp, "Temp: %.1f deg \r\n\n", temp_value_c/10);
			UART_Send(LPC_UART3, (uint8_t *)uart_temp , strlen(uart_temp), BLOCKING);

		}
	}
}

void UART_EMERGENCY(void) {

}


int main(void) {



	int i = 0, counter = 16;

	float param = 1.4;

	char seven_seg = ' ';



	init_i2c();												// Initializing core peripherals

	init_GPIO();

	init_ssp();

	init_uart();





	if (SysTick_Config(SystemCoreClock / 1000)) {

//		while (1);  										// Capture error

	}



	LPC_GPIOINT->IO2IntEnF |= 1<<10;						// Enable GPIO Interrupt P2.10

	NVIC_EnableIRQ(EINT3_IRQn);								// Enable EINT3 interrupt



	acc_init();												// Initializing external peripherals + clearing them

	joystick_init();

	led7seg_init();

	led7seg_setChar(' ', FALSE);

	light_enable();

	light_setRange(LIGHT_RANGE_16000);

	oled_init();

	oled_clearScreen(OLED_COLOR_BLACK);

	RGB_INIT();

	rotary_init();

	temp_init(&GETMSTICKS);



	oled_putString(0, 0, (uint8_t*) oled_init1, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

	oled_putString(0, 10, (uint8_t*) oled_init2, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

	oled_putString(0, 20, (uint8_t*) oled_init3, OLED_COLOR_WHITE, OLED_COLOR_BLACK);







	while (1) {



		MODE_TOGGLE = (GPIO_ReadValue(2) >> 10) & 0x1;

		EMERGENCY_OVER = (GPIO_ReadValue(1) >> 31) & 0x1;

		joyState = joystick_read();

		rotaryState = rotary_read();







//		***** TOOGLE_THRESHOLD function START *****



		if (init_toggle == 1) {







//			*** Joystick debouncing START ***



			if ((joyState & JOYSTICK_CENTER) != 0) {

				joystick_counter++;

			}



			else {

				joystick_counter = 0;

			}



			if (joystick_counter == 1) {

				joystick_counter2++;

			}



			joystick_toggle = joystick_counter2 % 2;



//			*** Joystick debouncing END ***







//			*** Rotary debouncing START ***



			if (rotaryState != 0) {

				rotary_value = rotaryState;

//				if (rotary_value == ROTARY_LEFT) {
//
//					rotary_left++;
//
//				}
//
//				if (rotary_value == ROTARY_RIGHT) {
//
//					rotary_right++;
//
//				}

			}



//			*** Rotary debouncing END ***







			if (joystick_toggle == 1) {



				oled_clearScreen(OLED_COLOR_BLACK);

				oled_putString(0, 0, (uint8_t*) oled_threshold, OLED_COLOR_WHITE, OLED_COLOR_BLACK);



				while(1) {



					joyState = joystick_read();

					rotaryState = rotary_read();



					sprintf(oled_threshold_acc, "Acc: %3.1f g", ACC_THRESHOLD);

					oled_putString(0, 20, (uint8_t*) oled_threshold_acc, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

					sprintf(oled_threshold_temp, "Temp: %4.1f deg", TEMP_THRESHOLD);

					oled_putString(0, 30, (uint8_t*) oled_threshold_temp, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

					sprintf(oled_threshold_light, "Light: %5lu lx", LIGHT_THRESHOLD);

					oled_putString(0, 40, (uint8_t*) oled_threshold_light, OLED_COLOR_WHITE, OLED_COLOR_BLACK);







//					*** Joystick debouncing START ***



					if ((joyState & JOYSTICK_CENTER) != 0) {

						joystick_counter++;

					}



					else {

						joystick_counter = 0;

					}



					if (joystick_counter == 1) {

						joystick_counter2++;

					}



					joystick_toggle = joystick_counter2 % 2;



//					*** Joystick debouncing END ***







//					*** Rotary debouncing START ***



					if (rotaryState != 0) {

						rotary_value = rotaryState;

					}



//					*** Rotary debouncing END ***







					if ((joyState & JOYSTICK_UP) != 0) {



						if (ACC_THRESHOLD < 1.9) {

							ACC_THRESHOLD += 0.1;

						}

					}



					if ((joyState & JOYSTICK_DOWN) != 0) {



						if (ACC_THRESHOLD > 0.2) {

							ACC_THRESHOLD -= 0.1;

						}

					}



					if ((joyState & JOYSTICK_LEFT) != 0) {



						if (LIGHT_THRESHOLD > 100) {

							LIGHT_THRESHOLD -= 100;

						}

					}



					if ((joyState & JOYSTICK_RIGHT) != 0) {



						if (LIGHT_THRESHOLD < 15900) {

							LIGHT_THRESHOLD += 100;

						}

					}



					if (rotary_value == ROTARY_LEFT) {



						if (TEMP_THRESHOLD > 20) {

							TEMP_THRESHOLD -= 0.5;

							rotary_value = 0;

//							rotary_left = 0;

						}



					}



					if (rotary_value == ROTARY_RIGHT) {



						if (TEMP_THRESHOLD < 40) {

							TEMP_THRESHOLD += 0.5 ;

							rotary_value = 0;

//							rotary_right = 0;

						}

					}



					if (joystick_toggle == 0) {



						joystick_counter = 0;

						joystick_counter2 = 0;

						oled_clearScreen(OLED_COLOR_BLACK);

						oled_putString(0, 0, (uint8_t*) oled_init1, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

						oled_putString(0, 10, (uint8_t*) oled_init2, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

						oled_putString(0, 20, (uint8_t*) oled_init3, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

						break;



					}

				}

			}

		}



//		***** TOOGLE_THRESHOLD function END *****







		if (MODE_TOGGLE == 0) {						// Prevents COUNTDOWN from activating again if you press MODE_TOGGLE more than once



			MODE_TOGGLE_counter++;



		}



		if (MODE_TOGGLE_counter == 1) {				// When MODE_TOGGLE (MODE_TOGGLE) is pressed, device transitions to CLIMB mode






//			***** COUNTDOWN function START *****



			joystick_toggle = 0;

			oled_clearScreen(OLED_COLOR_BLACK);



			oled_putString(0, 0, (uint8_t*) oled_toggle1, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

			oled_putString(0, 10, (uint8_t*) oled_toggle2, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

			oled_putString(0, 20, (uint8_t*) oled_toggle3, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

			oled_putString(0, 30, (uint8_t*) oled_toggle4, OLED_COLOR_WHITE, OLED_COLOR_BLACK);



			lightTicks = 0;



			for (i = 9; i >= 0; i--) {			// 7-segment decrements from 9 to 0



				seven_seg = i + '0';

				led7seg_setChar(seven_seg, FALSE);



				BLINK_BLUE_toggle = 1;

				systick_delay(500);				// Todo: optimise

			}



			BLINK_BLUE_toggle = 0;

			led7seg_setChar(' ', FALSE);

			oled_clearScreen(OLED_COLOR_BLACK);



//			***** COUNTDOWN function END *****







			acc_read(&acc_x_init, &acc_y_init, &acc_z_init);

			oled_putString(0, 0, (uint8_t*) oled_climb, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

			MODE_TOGGLE_counter++;

			MODE_TOGGLE_counter2++;

			init_toggle = 0;

			sprintf(msg, "CLIMB mode \r\n");
			UART_Send(LPC_UART3, (uint8_t *)msg , strlen(msg), BLOCKING);


		}



		if ((MODE_TOGGLE_counter > 1) && (MODE_TOGGLE_counter2 > 0)) {			// After transition, device is in CLIMB mode

																				// Prevents going to CLIMB mode prematurely if you spam sw3 during COUNTDOWN



			oled_putString(0, 0, (uint8_t*) oled_climb, OLED_COLOR_WHITE, OLED_COLOR_BLACK);



			counter = 16;

			acc_read(&acc_x, &acc_y, &acc_z);

			acc_net_sq = pow(acc_x - acc_x_init, 2) + pow(acc_y - acc_y_init, 2) + pow(acc_z - acc_z_init, 2);

			g_value = sqrt(acc_net_sq) / 64;

			light_value = light_read();

			temp_value = temp_read();

			temp_value_c = temp_value;

			uart_climb_toggle = 1;



			sprintf(oled_acc, "Acc: %4.2f g", g_value);

			oled_putString(0, 20, (uint8_t*) oled_acc, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

			sprintf(oled_temp, "Temp: %4.1f deg", temp_value_c/10);

			oled_putString(0, 30, (uint8_t*) oled_temp, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

			sprintf(oled_light, "Light: %5lu lx", light_value);

			oled_putString(0, 40, (uint8_t*) oled_light, OLED_COLOR_WHITE, OLED_COLOR_BLACK);







			// ***** AMBIENT_LIGHT_DETECTION function START *****



			for (i = 15; i >= 0; i--) {



				if (light_value <= (LIGHT_THRESHOLD / pow(param, i))) {



					counter = 15 - i;

					break;



				}

			}



			pca9532_setLeds((0b1111111111111111 >> counter), 0xFFFF);



			if (light_value < LIGHT_THRESHOLD) {



				sprintf(oled_dim, "DIM");

				oled_putString(50, 0, (uint8_t*) oled_dim, OLED_COLOR_WHITE, OLED_COLOR_BLACK);



			}



			else {

				oled_putString(50, 0, (uint8_t*) oled_blank_half, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

			}



//			***** AMBIENT_LIGHT_DETECTION function END *****







//			***** REST_NOW function START *****



			if (temp_value_c/10 > TEMP_THRESHOLD) {


				if (temp_threshold_counter == 0) {			// Prevents REST_NOW from activating every time TEMP_THRESHOLD is crossed



					pca9532_setLeds(0x0000, 0xFFFF);

					oled_clearScreen(OLED_COLOR_BLACK);

					oled_putString(0, 0, (uint8_t*) oled_restnow, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

					systick_delay(3000);					// Todo: Optimise

					oled_clearScreen(OLED_COLOR_BLACK);

					temp_threshold_counter++;



				}



			}



			else {

				temp_threshold_counter = 0;

			}



//			***** REST_NOW function END *****







//			***** EMERGENCY_MODE function START *****



			if (g_value > ACC_THRESHOLD) {

				uart_climb_toggle = 0;
				uart_emergency_toggle = 1;

				if (temp == 0) {
					sprintf(msg, "EMERGENCY! \n");
					UART_Send(LPC_UART3, (uint8_t *)msg , strlen(msg), BLOCKING);
					temp++;
				}
				oled_putString(0, 0, (uint8_t*) oled_blank, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

				oled_putString(0, 40, (uint8_t*) oled_blank, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

				oled_putString(0, 0, (uint8_t*) oled_emergency, OLED_COLOR_WHITE, OLED_COLOR_BLACK);



				pca9532_setLeds(0x0000, 0xFFFF);



				currentTicks = msTicks;



				while(1) {



					MODE_TOGGLE = (GPIO_ReadValue(2) >> 10) & 0x1;

					EMERGENCY_OVER = (GPIO_ReadValue(1) >> 31) & 0x1;

					ALTERNATE_LED_toggle = 1;



					acc_read(&acc_x, &acc_y, &acc_z);

					acc_net_sq = pow(acc_x - acc_x_init, 2) + pow(acc_y - acc_y_init, 2) + pow(acc_z - acc_z_init, 2);

					g_value = sqrt(acc_net_sq) / 64;

					temp_value = temp_read();

					temp_value_c = temp_value;

					elapsed_ms = msTicks - currentTicks;



					sprintf(oled_emergency_acc, "Acc: %4.2f g", g_value);

					oled_putString(0, 20, (uint8_t*) oled_emergency_acc, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

					sprintf(oled_emergency_temp, "Temp: %4.1f deg", temp_value_c/10);

					oled_putString(0, 30, (uint8_t*) oled_emergency_temp, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

					sprintf(oled_emergency_duration, "Time: %5.1f s", elapsed_ms/1000);

					oled_putString(0, 50, (uint8_t*) oled_emergency_duration, OLED_COLOR_WHITE, OLED_COLOR_BLACK);







//					***** SAVED function + BLINK_BLUE function START *****



					if ((MODE_TOGGLE == 0) && (EMERGENCY_OVER == 0)) {



						ALTERNATE_LED_toggle = 0;



						oled_clearScreen(OLED_COLOR_BLACK);

						oled_putString(0, 0, (uint8_t*) oled_emergency_saved1, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

						oled_putString(0, 10, (uint8_t*) oled_emergency_saved2, OLED_COLOR_WHITE, OLED_COLOR_BLACK);



						currentTicks = msTicks;

						lightTicks = 0;



						for (i = 4; i >= 0; i--) {



							BLINK_BLUE_toggle = 1;



							switch(i) {



								case(4): {

									led7seg_setChar('S', FALSE);

									break;

								}



								case(3): {

									led7seg_setChar('A', FALSE);

									break;

								}



								case(2): {

									led7seg_setChar('U', FALSE);

									break;

								}



								case(1): {

									led7seg_setChar('E', FALSE);

									break;

								}



								case(0): {

									led7seg_setChar('D', FALSE);

									break;

								}



								default: {

									led7seg_setChar(' ', FALSE);

									break;

								}

							}



							systick_delay(1000);			//Todo: optimise



						}



						led7seg_setChar(' ', FALSE);

						oled_clearScreen(OLED_COLOR_BLACK);

						BLINK_BLUE_toggle = 0;

						RGB_SETLED(0);
						uart_climb_toggle = 1;
						uart_emergency_toggle = 0;


						break;



					}



//					***** SAVED function + BLINK_BLUE function END *****







				}

			}



//			***** EMERGENCY_MODE function END *****







		}

	}

}
